#ifndef __CMDARGS_P6C_DEFINED
#define __CMDARGS_P6C_DEFINED

/*
    ============================================================================

    Header Name:        CmdArgs_P6C.H

    Library Header:     P6CStringLib1.H

    Library Names:      P6CLib1.lib (static)
                        P6CStringLib1.lib (dynamic)

    Synopsis:           Declare functions and constants used to retrieve command
                        line arguments passed to a Windows program in much the
                        same way that you would for a console program.

    Remarks:            Any function that includes this module must explicitly
                        include MSVCRT.lib in the list of link libraries. This
                        library is not part of the default list generated by the
                        Visual Studio AppWizard. It is, however, in the standard
                        set of libraries that ship with the Platform SDK. The
                        corresponding DLL file is part of any recent (within the
                        last decade or so) installation of Microsoft Windows.

    References:         1)  "Passing array to function in C Language,"
                            Dhananjoy Chakraborty,
                            http://chakra2009.blogspot.com/2010/11/passing-array-to-function-in-c-language.html

                        2)  The Ultimate (DLL) Header File
                            http://www.flounder.com/ultimateheaderfile.htm

    Author:             David A. Gray, of Simple Soft Services, Inc.,
                        d/b/a WizardWrx, Irving, Texas, USA.
                        http://www.wizardwrx.com/

    Date Written:       Saturday, 01 April 2006 through Monday, 03 April 2006.

	License:            Copyright (C) 2006-2016, David A. Gray. All rights reserved.

	Redistribution and use in source and binary forms, with or without
	modification, are permitted provided that the following conditions are met:

	*   Redistributions of source code must retain the above copyright notice,
	this list of conditions and the following disclaimer.

	*   Redistributions in binary form must reproduce the above copyright
	notice, this list of conditions and the following disclaimer in the
	documentation and/or other materials provided with the distribution.

	*   Neither the name of David A. Gray nor the names of his contributors may
	be used to endorse or promote products derived from this software without
	specific prior written permission.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

    ----------------------------------------------------------------------------
    Revision History
    ----------------------------------------------------------------------------

    Date       By  Synopsis
    ---------- --- -------------------------------------------------------------
    2005/04/03 DAG First working version.

    2009/11/19 DAG 1) Correctly cast pointers in ParseCmdArgs_P6C, to resolve
                      eight compiler warnings, none of which adversely affects
                      performance.

                   2) Modernize and simplify the internal documentation.

                   3) Substitute the shared handle to the process heap for the
                      individual copies of the same handle.

    2010/03/08 DAG Remove version numbers, which have no practical meaning when
                   applied to functions that are part of a static library.

    2010/04/25 DAG Reinstate direct inclusion of windows.h, since, as of this
                   date, CommonConstants_P6C.H works just fine without it.

    2010/06/04 DAG Add a #pragma once preprocessor directive outside the scope
                   of the preprocessor variable which performs the same function
				   for other C compilers.

    2011/05/17 DAG 1) Add a new function, GetCmdArgSwitchModifier_WW, which was
                      developed as part of WWNotify.C, and was thoroughly
                      exercised in that module before being relocated.

                   2) Simplify GetArg_P6C, eliminating two stack variables, and
                      forcing the compiler to keep its intermediate math results
                      in CPU registers, and avoiding the wasted code and time
                      required to store them in memory, even though that is only
					  in the stack frame.

                   3) Improve the internal documentation of all routines. Recent
                      experience tracing through them suggests that it is
					  greatly needed.

    2011/05/21 DAG 1) Correct the internal calls to DropArgs_P6C in function
                      ParseCmdArgs_P6C.

                   2) Install a new function, ReportCmdArgsError_WW.

                   3) Change ParseCmdArgs_P6C to return ERROR_SUCCESS if the
                      command line is successfully parsed, so that a call to it
                      can be nested within a call to ReportCmdArgsError_WW for
                      optimum execution efficiency.

    2011/06/09 DAG 1) Adjust formal parameters to agree with the definition of
                      function GetCmdArgSwitchModifier_WW.

                   2) Adjust declaration and implementations of DropArgs_P6C,
                      which takes an array as its first argument. See the first
                      reference.

                   3) Substitute the LIBSPEC calling convention for WINAPI on all
                      function declarations.

                   4) Add const qualifiers to all inputs EXCEPT DropArgs_P6C
                      argument pArgList, which is applied in a way that
                      disqualifies it.

                   5) Restore CPP guard variable __CMDARGS_P6C_DEFINED, which
                      got dropped sometime.

    2011/06/11 DAG Substitute a name, unique to this header, for LIBSPEC, to
                   prevent symbolic name collisions. This is the approach
                   implemented by the Visual C++ 6.0 AppWizard.

                   The name used in this header is LIBSPEC_CMDARGS_API.

    2011/10/26 DAG 1) Add this header to P6CStringLib1.H, and add the functions
                      declared in this header to the list of functions exported
					  by P6CStringLib1.dll, and linked through its link library,
					  P6CStringLib1.lib.

                   2) Substitute _CMDARGS_P6C_DEFINED for _CMDARGS_P6C, and
                      move the preprocessor test and declaration below the
                      #pragma once block.

    2011/10/30 DAG 1) Add CmdArgSwitchesA_WW.C and CmdArgSwitchesW_WW.C, via
                      static link library P6CLib1, merging the prototypes
                      into this header.

                   2) Add Unicode implementations of the functions that return
                      pointers to strings.

    2011/10/30 DAG Change the type of the two long integer arguments to function
                   GetArg_P6C from const long to const unsigned long, by way of
				   typedef CULONG.

    2012/01/29 DAG Change the type of the long integer argument to function
                   DropArgs_P6C from const long to const unsigned long, by way
                   of typedef CULONG.

    2012/02/05 DAG Except for the block in which LIBSPEC_CMDARGS_API is
                   mapped, move the blocks that were surrounded by
                   #ifdef __BUILDING_CMDARGS_P6C blocks to CmdArgs_P6C_Pvt.H.

    2012/06/30 DAG Based on recently gained knowledge of how various guard code
                   schemes work, move the #pragma once block inside the block
                   protected by the preprocessor guard variable.

    2012/07/02 DAG Apply an optimization, discovered in the course of a debug
                   session, to SaveCmdArgPvtA_P6C and SaveCmdArgPvtW_P6C, which
                   are defined in CmdArgsA_P6C.C and CmdArgsW_P6C.C,
                   respectively. For complete details, please see inline
                   include file SaveCmdArgPvt_P6C.INL, where the code and an
                   accompanying note live.

    2013/04/06 DAG Correct several typographical errors in the documentation of
                   GetSwitch_WW(). This is a documentation change only. The code
                   that defines these routines is unaffected and was left as it
				   stood. Likewise, source code that includes this header is
				   unaffected.

    2013/04/14 DAG Add an instruction to the inline assembly block in routine
                   SaveCmdArgPvt_P6C to load lpThisArgOut into register EAX,
                   since the optimizer doesn't appear to respect assumptions
                   about things being left in that register. Microsoft means
                   business when they say that nothing is sacred about any of
                   the CPU registers.

                   In the course of reviewing the code to identify the needed
                   change, I made some cosmetic changes in ParseCmdArgs_P6C,
                   including substituting my Unless macro for several If Not
                   tests.

    2013/06/18 DAG Eliminate an overlooked reference to CommonConstants_P6C.H
                   and substitute Const_Typedefs_WW.H, which is plenty for a
                   public interface. This update is built into P6CStringLib1,
                   version 2,8,1,0.

	2016/01/10 DAG Incorporate the standard three-clause BSD license.
    ============================================================================
*/

#if defined ( _MSC_VER ) && ( _MSC_VER >= 1020 )
#pragma once
#endif  /*  #if defined ( _MSC_VER ) && ( _MSC_VER >= 1020 ) */

#include <windows.h>

#include <Const_Typedefs_WW.H>

#ifdef __BUILDING_CMDARGS_P6C
    #define LIBSPEC_CMDARGS_API __declspec(dllexport)
#else   /*  #ifdef __BUILDING_CMDARGS_P6C */
    #ifdef __CMDARGS_STATIC_P6C__
        #define LIBSPEC_CMDARGS_API extern
    #else   /*  #ifdef __CMDARGS_STATIC_P6C__ */
        #define LIBSPEC_CMDARGS_API __declspec(dllimport)
    #endif  /*  #ifdef __CMDARGS_STATIC_P6C__ */
#endif  /*  #ifdef __BUILDING_CMDARGS_P6C */


//  ----------------------------------------------------------------------------
//  Define symbolic constants for result codes.
//  ----------------------------------------------------------------------------

#define NO_CMDARGS_P6C              ( 1 | APPLICATION_ERROR_MASK )
#define CMDARGS_MALLOC_ERROR_P6C    ( 2 | APPLICATION_ERROR_MASK )
#define UNBALANCED_QUOTES_P6C       ( 3 | APPLICATION_ERROR_MASK )
#define RIGHT_QUOTE_NO_SPACE_P6C    ( 4 | APPLICATION_ERROR_MASK )


//  ----------------------------------------------------------------------------
//  Define other symbols that could be kept private, but may benefit callers.
//  ----------------------------------------------------------------------------

#define NO_ARGS_WW                  ZERO_WW     // Initial value of argument count.

#define GET_SW_TEST_IS_WW           TRUE        // GetSwitch_WW() pfSwitchTest = IsSwitch_WW == TRUE
#define GET_SW_TEST_UNKNOWN_WW      FALSE       // GetSwitch_WW() pfSwitchTest = IsSwitch_WW == FALSE or Unknown

#define GET_SW_SWLEN_UNKNOWN_WW     ZERO_WW     // GetCmdArgSwitchModifier_WW() puintWholeArgLen == Unknown - call _tcslen

#define GET_SW_MODIFIER_PTR_WW      FALSE       // GetCmdArgSwitchModifier_WW() pfReturnACopy == A pointer will do
#define GET_SW_MODIFIER_CPY_WW      TRUE        // GetCmdArgSwitchModifier_WW() pfReturnACopy == Return a pointer to a copy


//  ----------------------------------------------------------------------------
//  The following enumeration is used with argument penmRptMethod to function
//  ReportCmdArgsError_WW, to direct the displayed message either to a message
//  box window or to the console.
//  ----------------------------------------------------------------------------

typedef enum _tagCMDARGS_REPORT_METHOD_WW {
    WCMDARGS_MSGBOX ,           // 0
    WCMDARGS_STDOUT ,           // 1
} CMDARGS_REPORT_METHOD_WW ;


//  ----------------------------------------------------------------------------
//  Patterned after PosLastCharOfString (defined in P6CStringLib1.H) and a line
//  of code in GetCmdArgSwitchModifier_WW (defined in CmdArgs_P6C.C), these
//  macros return a pointer to the character at a designated position in a
//  string. There are two versions of this macro.
//
//  PtrToCharAtIndex = This macro assumes that its second argument is an array
//                     subscript.
//
//  PtrToCharAtPos   = This macro uses another macro, OrdinalToArrayIndexP6C
//                     (defined in CommonConstants_P6C.H) to convert an ordinal
//                     character position to an array subscript.
//  ----------------------------------------------------------------------------

#define PtrToCharAtIndex(plpString,puintPos)    ( ( LPTCHAR ) ( plpString + puintPos ) )
#define PtrToCharAtPos(plpString,puintPos)      ( ( LPTCHAR ) ( plpString + OrdinalToArrayIndexP6C ( puintPos ) ) )


//  ----------------------------------------------------------------------------
//  Declare functions, all of which have "C" linkage, so that they can be called
//  by routines written in virtually any programming language.
//  ----------------------------------------------------------------------------

#if defined ( __cplusplus )
extern "C"
{
#endif	/* #if defined ( __cplusplus ) */

/*
    ============================================================================

    Function Name:      DropArgs_P6C

    Synopsis:           Given the pointer to the parsed argument list, returned
                        by companion function ParseCmdArgs_P6C, release the
                        memory occupied by the list.

    Arguments:          pArgV           = Array of long pointers to strings,
                                          containing one pointer per argument,
                                          returned by companion function
                                          ParseCmdArgs_P6C.

                        pArgC           = Long integer containing count of
                                          arguments, returned by companion
                                          function ParseCmdArgs_P6C through
                                          SetLastError.

    Returns:            rArgV           = NULL on success, as the pointer is now
                                          invalid.

                                          Please be sure to read the notes
                                          before you try to use this array.

    Remarks:            The last action preformed by this function is to release
                        the memory block occupied by the list of command line
                        arguments. That being the case, the block to which pArgV
                        points becomes invalid. By specifying the same variable
                        as the return value, the caller's copy of the pointer is
                        invalidated.

                        If the function fails for any reason, the return value
                        is equal to pArgV (NOT NULL), and you may call
                        GetLastError for further information.

                        Although the first argument points to a string, there is
                        no need for separate ANSI and Unicode versions, since
                        the sole task of this function is to discard the memory,
                        by calling HeapFree on each pointer.

    References:         None

    Date Written:       Saturday, 01 April 2006 through Monday, 03 April 2006.

    ============================================================================
*/

LPTSTR LIBSPEC_CMDARGS_API DropArgs_P6C
(
    LPTSTR pArgList ,
    CULONG pArgC
) ;


/*
    ============================================================================

    Function Name:      GetArg_P6C

    Synopsis:           Given a number between 1 and the number of command line
                        arguments, the pointer returned by companion function
                        ParseCmdArgs_P6C, and the number of arguments in the
                        list, return a pointer to the corresponding argument.

                        This function is implemented for both ANSI and Unicode
                        contexts.

    Arguments:          plngArgNbr      = Long integer containing ordinal number
                                          of desired argument.
                                          For the convenience of carbon units,
                                          numbering is 1 based.

                        pArgV           = Array of long pointers to strings,
                                          containing one pointer per argument,
                                          returned by companion function
                                          ParseCmdArgs_P6C.

                        pArgC           = Long integer containing count of
                                          arguments, returned by companion
                                          function ParseCmdArgs_P6C through
                                          SetLastError.

    Returns:            rArgV           = Array of long pointers to strings,
                                          containing one pointer per argument.

                                          Please be sure to read the notes
                                          before you try to use this array.

    Remarks:            Although C functions are not supposed to return arrays,
                        nothing in the rules actually prevents it. Although the
                        return value is nominally a scalar, it actually points
                        to a block of memory that holds an array of LPTSTR data,
                        one for each command line arguments.

                        You must call function ParseCmdArgs_P6C to parse the
                        command line arguments, then call GetLastError to get
                        the argument count to use for argument pArgC.

                        Use companion function DropArgs_P6C to release memory
                        occupied by the parsed command line arguments. In one
                        call, it releases all the string storage and the table

    References:         None

    Date Written:       Saturday, 01 April 2006 through Monday, 03 April 2006

    ============================================================================
*/

LPTSTR LIBSPEC_CMDARGS_API GetArgA_P6C
(
    CULONG  pulngArgNbr ,
    LPCTSTR pArgList ,
    CULONG  pArgC
) ;

LPTSTR LIBSPEC_CMDARGS_API GetArgW_P6C
(
    CULONG  pulngArgNbr ,
    LPCTSTR pArgList ,
    CULONG  pArgC
) ;

#ifdef UNICODE
    #define GetArg_P6C  GetArgW_P6C
#else
    #define GetArg_P6C  GetArgA_P6C
#endif  /*  #ifdef UNICODE */


/*
    ============================================================================

    Function Name:      GetCmdArgSwitchModifier_WW

    Synopsis:           Extract the modifier (the trailing text) from a Unix
                        styled switch argument.

                        This function is implemented for both ANSI and Unicode
                        contexts.

    Arguments:          plpWholeArg         = LPCTSTR [in] - Constant pointer to
                                              the switch argument from which to
                                              extract the modifier.

                        puintWholeArgLen    = UINT [in, optional] - Constant
                                              unsigned integer containing the
                                              length, in TCHARs (e. g., from
                                              _tcslen) of the string to which
                                              plpWholeArg points.

                                              If puintWholeArgLen is invalid
                                              (less than 1), _tcslen is called
                                              internally to get the length.

                        pfReturnACopy       = BOOL [in] - Constant Boolean,
                                              interpreted as follows.

                                              FALSE   = Return a pointer to the
                                                        modifier, within input
                                                        string, plpWholeArg.

                                                        The value of the
                                                        pointer is an address
                                                        within the memory
                                                        occupied by the string,
                                                        or NULL, if the argument
                                                        is bare (unmodified).

                                              TRUE    = Copy the modifier into a
                                                        new buffer, and return a
                                                        pointer to it. If the
                                                        switch is bare
                                                        (unmodified), the pointer
                                                        is NULL, as it would be
                                                        if pfReturnACopy is
                                                        FALSE.

                                              FALSE is the preferred value,
                                              since it uses less memory.

    Returns:            The return value is a pointer to the switch modifier,
                        either where it begins within the input string, or at
                        the start of the buffer into which it is copied. See
                        Remarks for additional information.

    Remarks:            If all you need with the switch modifier is to read it
                        or merge it into another string, a pointer to its start
                        in the input string is as good as a copy. Either way, it
                        is a valid C string.

                        If you insist on having a copy, a purpose-build function
                        from my library of functions for manipulating C strings,
                        CopyStringToNewBuf_P6C, is called with the pointer that
                        would have been returned. The returned buffer is exactly
                        the right size to hold the string, and is allocated from
                        the default process heap.

    References:         None

    ============================================================================
*/

LPTSTR LIBSPEC_CMDARGS_API GetCmdArgSwitchModifierA_WW
(
    LPCTSTR plpWholeArg ,
    CUINT   puintWholeArgLen,
    CBOOL   pfReturnACopy
) ;

LPTSTR LIBSPEC_CMDARGS_API GetCmdArgSwitchModifierW_WW
(
    LPCTSTR plpWholeArg ,
    CUINT   puintWholeArgLen,
    CBOOL   pfReturnACopy
) ;

#ifdef UNICODE
    #define GetCmdArgSwitchModifier_WW  GetCmdArgSwitchModifierW_WW
#else
    #define GetCmdArgSwitchModifier_WW  GetCmdArgSwitchModifierA_WW
#endif  /*  #ifdef UNICODE */


/*
    ============================================================================

    Function Name:      GetSwitch_WW

    Function Synopsis:  Evaluate a command line argument, and return the switch
                        letter, if it is a switch, otherwise a NULL character.

                        This function is implemented for both ANSI and Unicode
                        contexts.

    Arguments:          plpArg          = Pointer to argument to evaluate

                        pfSwitchTest    = Boolean TRUE if function IsSwitch_WW
                                          was already called on plpArg, and it
                                          returned TRUE. See Remarks.

    Returns:            The return value is a pointer to the switch, or a NULL
                        pointer. LPTCHAR is a typedef, cast to pointer to TCHAR.

    Remarks:            The switch is the second character of a valid command
                        line switch.

                        If pfSwitchTest is FALSE, function IsSwitch_WW is called
                        internally. Otherwise, the function assumes that it was
                        already called, and that it returned TRUE. A compact way
                        to make this happen is to nest a call to IsSwitch_WW in
                        the call to this function, since its return value has no
                        permanent value.

    ============================================================================
*/

LPTCHAR LIBSPEC_CMDARGS_API GetSwitchA_WW
(
    LPCTSTR plpArg ,
    CBOOL   pfSwitchTest
) ;

LPTCHAR LIBSPEC_CMDARGS_API GetSwitchW_WW
(
    LPCTSTR plpArg ,
    CBOOL   pfSwitchTest
) ;

#ifdef UNICODE
    #define GetSwitch_WW  GetSwitchW_WW
#else
    #define GetSwitch_WW  GetSwitchA_WW
#endif  /*  #ifdef UNICODE */


/*
    ============================================================================

    Function Name:      IsSwitch_WW

    Function Synopsis:  Evaluate a command line argument, returning TRUE if it
                        is a switch.

                        This function is implemented for both ANSI and Unicode
                        contexts.

    Arguments:          plpArg          = Pointer to argument to evaluate

    Returns:            TRUE            = String plpArg is a switch.
                        FALSE           = String plpArg is NOT a switch

    Remarks:            A switch is defined as any command line argument that
                        begins with a hyphen or an underscore.

    ============================================================================
*/

BOOL    LIBSPEC_CMDARGS_API IsSwitchA_WW ( LPCTSTR plpArg ) ;
BOOL    LIBSPEC_CMDARGS_API IsSwitchW_WW ( LPCTSTR plpArg ) ;

#ifdef UNICODE
    #define IsSwitch_WW IsSwitchW_WW
#else
    #define IsSwitch_WW IsSwitchA_WW
#endif  /*  #ifdef UNICODE */


/*
    ============================================================================

    Function Name:      ParseCmdArgs_P6C

    Synopsis:           Given a pointer to the command line arguments passed to
                        the WinMain function of a graphical Windows program,
                        parse the string by the rules used by Windows, returning
                        an array of pointers to the individual arguments.

    Arguments:          pchrCmdArgs     = Pointer, of type char, to the CmdArg
                                          string passed to any WinMain function
                                          as its third argument.

    Returns:            rArgV           = Array of long pointers to strings,
                                          containing one pointer per argument.

                                          Please be sure to read the notes
                                          before you try to use this array.

    Remarks:            Although C functions are not supposed to return arrays,
                        nothing in the rules actually prevents it. Although the
                        return value is nominally a scalar, it actually points
                        to a block of memory that holds an array of LPTSTR data,
                        one for each command line arguments.

                        Use companion function GetArg_P6C to retrieve individual
                        command line arguments. The LPTSTR that it returns may
                        safely be treated as an ordinary string pointer.

                        Use companion function DropArgs_P6C to release memory
                        occupied by the parsed command line arguments. In one
                        call, it releases all the string storage and the table.

    References:         None

    Date Written:       Saturday, 01 April 2006 through Monday, 03 April 2006.

    ============================================================================
*/

LPTSTR LIBSPEC_CMDARGS_API ParseCmdArgsA_P6C ( const TCHAR * pchrCmdArgs ) ;
LPTSTR LIBSPEC_CMDARGS_API ParseCmdArgsW_P6C ( const TCHAR * pchrCmdArgs ) ;

#ifdef UNICODE
    #define ParseCmdArgs_P6C ParseCmdArgsW_P6C
#else
    #define ParseCmdArgs_P6C ParseCmdArgsA_P6C
#endif  /*  #ifdef UNICODE */


/*
    ============================================================================

    Function Name:      ReportCmdArgsError_WW

    Synopsis:           Translate the return code from ParseCmdArgs_P6C into an
                        English language message, more comprehensible to carbon
                        units than numerical codes.

    Arguments:          plpCmdArgs      = LPCTSTR [in] pointer to the CmdArg
                                          string passed to any WinMain function
                                          as its third argument, or to the ArgV
                                          string array passed into a console
                                          program.

                        pdwLastError    = DWORD [in] status code returned by
                                          companion function ParseCmdArgs_P6C
                                          through SetLastError. See Remarks.

                        penmRptMethod   = CMDARGS_REPORT_METHOD_WW [in] is an
                                          enumeration whose value determines how
                                          the error is reported.

                                          The following values are supported.

                                              WCMDARGS_MSGBOX = 0 - Report via
                                                                    MesssageBox.

                                              WCMDARGS_STDOUT = 1 - Report via
                                                                    STDOUT, via
                                                                    _tprintf.

                                          Default is WCMDARGS_MSGBOX, since a
                                          console programs can display a message
                                          box, but a graphical Windows program
                                          cannot write on the console that it
                                          doesn't have.

                        phwndOfCaller   = HWND [in] Handle to caller's active
                                          window, which may be null. See
                                          Remarks.

                        plpWndCaption   = LPCTSTR [in] Pointer to a null
						                  terminated string, which becomes the
										  window caption (title) for the message
										  box; this argument is ignored unless
                                          penmRptMethod is WCMDARGS_MSGBOX.

                        plpModuleName   = LPCTSTR [in] Pointer to a null 
						                  terminated string, which is 
										  substituted into a message template, 
										  to identify the executing program.

    Returns:            pdwLastError    = DWORD [out] is the status code from
                                          ParseCmdArgs_P6C. See Remarks.

    Remarks:            1)  The simplest way to pass the result code returned by
                            ParseCmdArgs_P6C is to do one of two things.

                            a)  Since ParseCmdArgs_P6C calls SetLastErro AND
                                returns the status code as its value, save that
                                return value into a DWORD (unsigned long), and
                                pass that value.

                            b)  Since this function passes the statuc code from
                                ParseCmdArgs_P6C through as its own value, you
                                may nest a call to ParseCmdArgs_P6C within a
                                call to this function, which does nothing unless
                                the return code warrants a message.

                        2)  A console program has no true window handle, but the
                            MessageBox function works just fine without one, by
                            anchoring itself to the active Desktop.

    ============================================================================
*/

DWORD LIBSPEC_CMDARGS_API ReportCmdArgsErrorA_WW
(
    LPCTSTR                        plpCmdArgs ,
    CDWORD                         pdwLastError ,
    const CMDARGS_REPORT_METHOD_WW penmRptMethod ,
    const HWND                     phwndOfCaller ,
    LPCTSTR                        plpWndCaption ,
    LPCTSTR                        plpModuleName
) ;

DWORD LIBSPEC_CMDARGS_API ReportCmdArgsErrorW_WW
(
    LPCTSTR                        plpCmdArgs ,
    CDWORD                         pdwLastError ,
    const CMDARGS_REPORT_METHOD_WW penmRptMethod ,
    const HWND                     phwndOfCaller ,
    LPCTSTR                        plpWndCaption ,
    LPCTSTR                        plpModuleName
) ;

#ifdef UNICODE
    #define ReportCmdArgsError_WW ReportCmdArgsErrorW_WW
#else
    #define ReportCmdArgsError_WW ReportCmdArgsErrorA_WW
#endif  /*  #ifdef UNICODE */


/*
    ============================================================================

    Function Name:      SwitchHasModifier_WW

    Function Synopsis:  Evaluate a command line argument, returning TRUE if it
                        is a switch AND has a modifier.

    Arguments:          plpArg  = Pointer to argument to evaluate

    Returns:            TRUE    = String plpArg is a modified switch.
                        FALSE   = String plpArg is NOT a  modified switch.

    Remarks:            String plpArg is assumed to be a valid switch as defined
                        by IsSwitch_WW(). Unless IsSwitch_WW() did or would
                        return TRUE, the value returned by SwitchHasModifier_WW
                        is meaningless.

    ============================================================================
*/

BOOL LIBSPEC_CMDARGS_API SwitchHasModifierA_WW ( LPCTSTR plpArg ) ;
BOOL LIBSPEC_CMDARGS_API SwitchHasModifierW_WW ( LPCTSTR plpArg ) ;

#ifdef UNICODE
    #define SwitchHasModifier_WW SwitchHasModifierW_WW
#else
    #define SwitchHasModifier_WW SwitchHasModifierA_WW
#endif  /*  #ifdef UNICODE */


#if defined ( __cplusplus )
}
#endif  /* #if defined ( __cplusplus ) */
#endif  /* #ifndef __CMDARGS_P6C_DEFINED */